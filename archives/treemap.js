(() => {
    const sourceData = [
        { name: 'root', parent: '' },
        { name: 'Backdoor.ASP.Ace.a', parent: 'root' },
        { name: 'Backdoor.ASP.Ace.ac', parent: 'Backdoor.ASP.Ace.a' },
        { name: 'Backdoor.ASP.Ace.af', parent: 'Backdoor.ASP.Ace.a' },
        { name: 'Backdoor.ASP.Ace.ag', parent: 'Backdoor.ASP.Ace.a' },
        { name: 'Backdoor.ASP.Ace.ai', parent: 'Backdoor.ASP.Ace.ac' },
        { name: 'Backdoor.ASP.Ace.ar', parent: 'Backdoor.ASP.Ace.a' },
        { name: 'Backdoor.ASP.Ace.aw', parent: 'Backdoor.ASP.Ace.ai' },
        { name: 'Backdoor.ASP.Ace.bf', parent: 'root' },
        { name: 'Backdoor.ASP.Ace.br', parent: 'root' },
    ]
    
    const generateColor = d3.scaleOrdinal(d3.schemeCategory10)
    
    const data = d3.stratify()
        .id(node => node.name)
        .parentId(node => node.parent)(sourceData)
        .count()
    
    const treemap = d3.treemap()
        .size([1000, 1000])
        .tile(d3.treemapBinary)
        .paddingOuter(5)
        .paddingInner(10)
        .round(true)
    
    const computedData = treemap(data)
    
    const body = d3.select('body')
    body.on('keydown', () => {
        if (d3.event.code === 'Backspace') {
            svg.transition().attr('viewBox', `0, 0, 1000, 1000`)
        }
    })

    const svg = d3.select('#canvas')
        .attr('preserveAspectRatio', 'xMidYMid meet')
        .attr('viewBox', '0, 0, 1000, 1000')
        .style('width', '100%')
        .style('height', '100%')
        .style('background-color', '#FFFFFF')
    
    const background = svg.append('rect')
        .attr('x', -1000)
        .attr('y', -1000)
        .attr('width', 4000)
        .attr('height', 4000)
        .attr('fill', '#CDCDCD')
        .style('cursor', 'grab')
    
    const nodeGroup = svg.append('g')
        .style('cursor', 'pointer')
    
    const node = nodeGroup.selectAll('g')
        .data(computedData.descendants())
        .enter()
        .append('g')
        .on('click', (d) => {
            const [x, y, width, height] = [d.x0 - 500, d.y0 - 500, 1000, 1000]
            svg.transition().attr('viewBox', `${x}, ${y}, ${width}, ${height}`)
        })
    
    const nodeBlock = node.append('rect')
        .attr('x', d => d.x0)
        .attr('y', d => d.y0)
        .attr('width', d => d.x1 - d.x0)
        .attr('height', d => d.y1 - d.y0)
        .attr('fill', d => d.depth === 0 ? generateColor() : 'rgba(255, 255, 255, 0.2)')
    
    
    /* 
    const nodeText = node.append('text')
        .attr('x', d => d.y + 30)
        .attr('y', d => d.x)
        .text(d => d.data.name)
        .attr('fill', '#FFFFFF')
        .attr('dominant-baseline', 'central')
        .style('font-size', 16)
    */

})()