export default class D3Graph {
    constructor(svg, sourceData) {
        this.svg = svg
        this.sourceData = sourceData
        this.computedData = this.computeData(sourceData)
        this.originPointerPosition = null
    }

    findIndexByName (name) {
        return this.sourceData.findIndex(data => data.name === name)
    }

    generateColor = d3.scaleOrdinal(d3.schemeCategory10)

    setBodyKeyEvent () {
        const body = d3.select('body')
        body.on('keydown', () => {
            if (d3.event.code === 'Backspace') {
                this.svg.transition().attr('viewBox', `0, 0, 1000, 1000`)
            }
        })
    }

    setSvg () {
        return this.svg.attr('preserveAspectRatio', 'xMidYMid meet')
            .attr('viewBox', '0, 0, 1000, 1000')
            .style('width', '100%')
            .style('height', '100%')
            .style('background-color', '#FFFFFF')
    }

    dragHandler = d3.drag()
        .on('start', () => {
            const { x, y } = d3.event
            this.originPointerPosition = { x, y }
        })
        .on('drag', () => {
            const { x, y } = d3.event
            const viewBox = this.svg.node().viewBox.baseVal
            viewBox.x += this.originPointerPosition.x - x
            viewBox.y += this.originPointerPosition.y - y
        })
    
    drawBackground () {
        return this.svg.append('rect')
            .attr('x', -1000)
            .attr('y', -1000)
            .attr('width', 4000)
            .attr('height', 4000)
            .attr('fill', '#CDCDCD')
            .style('cursor', 'grab')
    }
}
