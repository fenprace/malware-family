(() => {
    const sourceData = [
        { name: 'root', parent: '' },
        { name: 'Backdoor.ASP.Ace.a', parent: 'root' },
        { name: 'Backdoor.ASP.Ace.ac', parent: 'Backdoor.ASP.Ace.a' },
        { name: 'Backdoor.ASP.Ace.af', parent: 'Backdoor.ASP.Ace.a' },
        { name: 'Backdoor.ASP.Ace.ag', parent: 'Backdoor.ASP.Ace.a' },
        { name: 'Backdoor.ASP.Ace.ai', parent: 'Backdoor.ASP.Ace.ac' },
        { name: 'Backdoor.ASP.Ace.ar', parent: 'Backdoor.ASP.Ace.a' },
        { name: 'Backdoor.ASP.Ace.aw', parent: 'Backdoor.ASP.Ace.ai' },
        { name: 'Backdoor.ASP.Ace.bf', parent: 'root' },
        { name: 'Backdoor.ASP.Ace.br', parent: 'root' },
    ]
    
    const findIndexByName = (name) => {
        return sourceData.findIndex(data => data.name === name)
    } 

    const indexedSourceData = Object.fromEntries(
        sourceData.map((data, index) => [data.name, data])
    )

    const generateColor = d3.scaleOrdinal(d3.schemeCategory10)
    
    const data = d3.stratify()
        .id(node => node.name)
        .parentId(node => node.parent)(sourceData)
    
    const tree = d3.tree()
        .size([1000, 1000])
    
    const computedData = tree(data)
    
    const body = d3.select('body')
    body.on('keydown', () => {
        if (d3.event.code === 'Backspace') {
            svg.transition().attr('viewBox', `0, 0, 1000, 1000`)
        }
    })

    const svg = d3.select('#canvas')
        .attr('preserveAspectRatio', 'xMidYMid meet')
        .attr('viewBox', '0, 0, 1000, 1000')
        .style('width', '100%')
        .style('height', '100%')
        .style('background-color', '#FFFFFF')
    
    const background = svg.append('rect')
        .attr('x', -1000)
        .attr('y', -1000)
        .attr('width', 4000)
        .attr('height', 4000)
        .attr('fill', '#CDCDCD')
        .style('cursor', 'grab')
    
    const linkGroup = svg.append('g')
        .attr("fill", "none")
        .attr("stroke", "#FFFFFF")
        .attr("stroke-opacity", 0.8)
        .attr("stroke-width", 2)
    
    const link = linkGroup.selectAll('path')
            .data(computedData.links())
            .enter()
            .append('path')
            .attr('d', d3.linkHorizontal()
                .x(d => d.y)
                .y(d => d.x)
            )
    
    const nodeGroup = svg.append('g')
        .style('cursor', 'pointer')
    
    const node = nodeGroup.selectAll('g')
        .data(computedData.descendants())
        .enter()
        .append('g')
        .attr('class', d => {
            const ancestors = d.ancestors()
            const classNames = ancestors.map((a, i) => {
                const label = i === 0
                    ? 'node'
                    : 'ancestor'

                const index = findIndexByName(a.data.name)
                return `${label}-${index}`
            })

            return classNames.join(' ')
        })
        .on('click', (d) => {
            const [x, y, width, height] = [d.y - 500, d.x - 500, 1000, 1000]
            svg.transition().attr('viewBox', `${x}, ${y}, ${width}, ${height}`)
        })
    
    const nodeBg = node.append('rect')
        .attr('x', d => d.y)
        .attr('y', d => d.x - 15)
        .attr('rx', 15)
        .attr('ry', 15)
        .attr('width', 200)
        .attr('height', 30)
        .attr('fill', '#FFFFFF')
    
    const nodeFg = node.append('rect')
        .attr('x', d => d.y + 2)
        .attr('y', d => d.x - 13)
        .attr('rx', 13)
        .attr('ry', 13)
        .attr('width', 196)
        .attr('height', 26)
        .attr('fill', d => generateColor(d.y))
        
    const nodeCircle = node.append('circle')
        .attr('cx', d => d.y + 15)
        .attr('cy', d => d.x)
        .attr('r', 10)
        .attr('fill', '#FFFFFF')

    const nodeSign = node.append('text')
        .attr('class', 'sign')
        .attr('x', d => d.y + 15)
        .attr('y', d => d.x)
        .text('-')
        .attr('fill', d => generateColor(d.y))
        .attr('dominant-baseline', 'middle')
        .attr('text-anchor', 'middle')
        .style('font-size', 20)
        .on('click', (d) => {
            d3.event.stopPropagation();
            const index = findIndexByName(d.data.name)

            const currentNodeSign = d3.select(`.node-${index} .sign`)
            
            if (currentNodeSign.text() === '-') {
                currentNodeSign.text('+')
                d3.selectAll(`.ancestor-${index}`)
                    .style('display', 'none')
            } else {
                currentNodeSign.text('-')
                d3.selectAll(`.ancestor-${index}`)
                    .style('display', '')
            }
        })
        
    const nodeText = node.append('text')
        .attr('x', d => d.y + 30)
        .attr('y', d => d.x)
        .text(d => d.data.name)
        .attr('fill', '#FFFFFF')
        .attr('dominant-baseline', 'central')
        .style('font-size', 16)
})()