const computeSourceData = (samples) => {
    const sourceData = [{ name: 'root', fullName: 'root', parent: '' }];
    
    samples = samples.filter(d => d.Family !== 'BaiXiang I')

    for (let i in samples) {
        const sample = samples[i]
        const [n0, n1, n2, n3] = sample.Name.split('.')

        if (!sourceData.find(d => d.fullName === n0)) {
            sourceData.push({ name: n0, fullName: n0, parent: 'root' });
        }

        if (!sourceData.find(d => d.fullName === `${n0}.${n1}`)) {
            sourceData.push({ name: n1, fullName: `${n0}.${n1}`, parent: n0 });
        }

        if (!sourceData.find(d => d.fullName === `${n0}.${n1}.${n2}`)) {
            sourceData.push({ name: n2, fullName: `${n0}.${n1}.${n2}`, parent: `${n0}.${n1}` });
        }

        sourceData.push({ name: n3, fullName: `${n0}.${n1}.${n2}.${n3}`, parent: `${n0}.${n1}.${n2}` })
    }

    return sourceData
}

const generateColor = d3.scaleOrdinal(d3.schemeCategory10)

const findNodeInTree = (node, tree) => {
    let result = null

    tree.each(n => {
        if (n.id === node.id) {
            result = n
        }
    })

    return result
}

const setViewBox = (svg, background, { x = 0, y = 0, width = 1000, height = 1000 } = {}) => {
    const viewBox = svg.node().viewBox.baseVal
    viewBox.x = x
    viewBox.y = y
    viewBox.width = width
    viewBox.height = height

    if (background) {
        background.attr('x', x - 1000)
            .attr('y', y - 1000)
    }
}

const stratify = d3.stratify()
    .id(node => node.fullName)
    .parentId(node => node.parent)

export { computeSourceData, generateColor, findNodeInTree, setViewBox, stratify }