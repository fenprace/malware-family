import React, { useState, useEffect } from 'react'
import { uniqueId, findNodeInTree, stratify } from '../utils'
import { Card, Radio, Descriptions, message } from 'antd'
import TreeGraph from './TreeGraph'
import TreeMapGraph from './TreeMapGraph'

const onExpandNode = ({ fullTree, setShownPairs }, node ) => {
    const originalNode = findNodeInTree(node, fullTree)

    if (originalNode.children) {
        const list = originalNode.children.map(child => ({ ...child.data, id: child.id, parent: originalNode.id }))
        setShownPairs(nodes => nodes.concat(list))
    }
}

const onCollapseNode = ({ fullTree, setShownPairs }, node) => {
    if (node.children) {
        const list = node.descendants().slice(1)
        const ids = list.map(n => n.id)
        setShownPairs(nodes => nodes.filter(n => !ids.includes(n.id)))
    }
}

const onSelectNode = ({ setSelectedNode }, node) => {
    if (node.data && node.data.name && node.data.name !== 'Root') setSelectedNode(node)
}

const onDeselectNode = ({ setSelectedNode }) => {
    setSelectedNode(null)
}

const extra = ({ setGraphType }) => <Radio.Group
    onChange={e => setGraphType(e.target.value)}
    defaultValue="tree"
>
    <Radio.Button value="tree">Tree</Radio.Button>
    <Radio.Button value="treemap">Treemap</Radio.Button>
</Radio.Group>

const Graph = (props) => {
    const { cluster } = props

    const [fullTree, setFullTree] = useState(null)
    const [fullPairs, setFullPairs] = useState(null)
    const [shownTree, setShownTree] = useState(null)
    const [shownPairs, setShownPairs] = useState(null)
    const [graphType, setGraphType] = useState('tree')
    const [selectedNode, setSelectedNode] = useState(null)

    const hooks = {
        fullTree, setFullTree, 
        shownTree, setShownTree,
        fullPairs, setFullPairs,
        shownPairs, setShownPairs,
        graphType, setGraphType,
        selectedNode, setSelectedNode,
    }

    useEffect(() => {
        const url = `http://0.0.0.0:8081/view_cluster.json?id=${cluster.id}`

        d3.json(url).then(sourceData => {
            const _fullTree = d3.hierarchy(sourceData)
            const _fullPairs = []

            _fullTree.each(node => {
                const id = node.id = uniqueId()
                const data = Object.assign({}, node.data, { children: undefined })
                _fullPairs.push({ id, ...data, parent: (node.parent && node.parent.id) || '' })
            })

            setFullTree(_fullTree)
            setFullPairs(_fullPairs)
            setShownPairs([_fullPairs[0]])
        }).catch(() => {
            message.error('Failed to load cluster')
        })    
    }, [])

    useEffect(() => {
        if (shownPairs) {
            const _shownTree = stratify(shownPairs)
            setShownTree(_shownTree)
        }
    }, [shownPairs])

    const graphProps = {
        fullTree, shownTree,
        onExpandNode: n => onExpandNode(hooks, n),
        onCollapseNode: n => onCollapseNode(hooks, n),
        onSelectNode: n => onSelectNode(hooks, n),
        onDeselectNode: n => onDeselectNode(hooks),
    }

    return shownTree && <Card
        title="Family Tree"
        style={{ marginTop: 24}}
        bodyStyle={{ padding: 0 }}
        extra={extra(hooks)}
    >
        {
            graphType && graphType === 'tree'
                ? <TreeGraph {...graphProps} />
                : <TreeMapGraph {...graphProps} />
        }

        {
            selectedNode && <Card
                style={{
                    top: 89,
                    right: 24,
                    position: 'absolute'
                }}
            >
                <Descriptions
                    bordered
                    border
                    size="small"
                    column={1}
                >   
                    <Descriptions.Item label="Name">{selectedNode.data.name}</Descriptions.Item>
                    <Descriptions.Item label="Hash">{selectedNode.data.hash}</Descriptions.Item>
                    <Descriptions.Item label="Functions">{selectedNode.data.functions}</Descriptions.Item>
                </Descriptions>
                
            </Card>
        }
    </Card>
}

export default Graph