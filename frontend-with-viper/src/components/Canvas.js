import React, { useState, useEffect } from 'react'
import { computeSourceData, findNodeInTree, stratify } from '../utils'
import TreeGraph from './TreeGraph'
import TreeMapGraph from './TreeMapGraph'

const onExpandNode = (node, fullTree, setShownNodes) => {
    const originalNode = findNodeInTree(node, fullTree)

    if (originalNode.children) {
        const list = originalNode.children.map(child => child.data)
        setShownNodes(nodes => nodes.concat(list))
    }
}

const onCollapseNode = (node, setShownNodes) => {
    if (node.children) {
        const list = node.descendants().slice(1)
        const ids = list.map(n => n.id)
        setShownNodes(nodes => nodes.filter(n => !ids.includes(n.fullName)))
    }
}

const Canvas = (props) => {
    const { graphType } = props
    const [fullNodes, setFullNodes] = useState(null)
    const [fullTree, setFullTree] = useState(null)
    const [shownNodes, setShownNodes] = useState([{ name: 'root', fullName: 'root', parent: '' }])
    const [shownTree, setShownTree] = useState(null)
    const [tooltipContent, setTooltipContent] = useState(null)

    const setTooltip = (content) => {
        setTooltipContent(content)
    }

    useEffect(() => {
        d3.csv('./MalwareFamilies.csv').then(samples => {
            const _fullNodes = computeSourceData(samples)

            const _fullTree = d3.stratify()
                .id(node => node.fullName)
                .parentId(node => node.parent)(_fullNodes)

            setFullNodes(_fullNodes)
            setFullTree(_fullTree)
        });    
    }, [])

    useEffect(() => {
        const _shownTree = stratify(shownNodes)
        setShownTree(_shownTree)
    }, [shownNodes])

    const graphProps = {
        fullTree,
        shownTree,
        setTooltip,
        onExpandNode: n => onExpandNode(n, fullTree, setShownNodes),
        onCollapseNode: n => onCollapseNode(n, setShownNodes),
    }

    const map = {
        tree: <TreeGraph { ...graphProps } />,
        treemap: <TreeMapGraph { ...graphProps } />,
    }

    return shownTree && fullTree && <div>
        { map[graphType] }
        { tooltipContent ? tooltipContent : null }
    </div>
}

export default Canvas