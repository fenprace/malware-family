import React, { useEffect } from 'react';
import { generateColor } from '../utils';
import { useSettingCanvas, useSettingBackspaceEvent } from './hooks'

const TreeMapGraph = (props) => {
    const { fullTree, shownTree, onExpandNode, onCollapseNode, onSelectNode, onDeselectNode } = props

    const computedData = d3.treemap()
        .size([1000, 1000])
        .tile(d3.treemapBinary)
        .paddingOuter(10)
        .paddingInner(5)
        .round(true)(shownTree.count())

    useSettingCanvas()
    useSettingBackspaceEvent(() => {
        const svg = d3.select('#canvas')
        svg.transition().attr('viewBox', '0, 0, 1000, 1000')
        onCollapseNode(fullTree)
    })

    useEffect(() => {
        const svg = d3.select('#canvas')
        svg.selectAll("g").remove()

        const nodeGroup = svg.append('g')
        .style('cursor', 'pointer')

        const node = nodeGroup.selectAll('g')
            .data(computedData.descendants())
            .enter()
            .append('g')
            .on('click', d => {
                d.children ? onCollapseNode(d) : onExpandNode(d)
            })
            .on('mouseenter', d => onSelectNode(d))
            .on('mouseleave', () => onDeselectNode())
        
        const nodeBlock = node.append('rect')
            .attr('x', d => d.x0)
            .attr('y', d => d.y0)
            .attr('width', d => d.x1 - d.x0)
            .attr('height', d => d.y1 - d.y0)
            .attr('fill', d => d.depth === 0 ? generateColor() : 'rgba(255, 255, 255, 0.2)')
        
        const nodeText = node.append('text')
            .attr('x', d => d.x0 + 10)
            .attr('y', d => (d.y0 + d.y1) / 2)
            .text(d => d.children ? '' : d.data.name)
            .attr('fill', '#FFFFFF')
            .attr('dominant-baseline', 'central')
            .style('font-size', 16)
    })

    return <svg id="canvas"></svg>
}

export default TreeMapGraph