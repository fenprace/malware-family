import React, { useEffect } from 'react';
import { generateColor, findNodeInTree } from '../utils';
import { useSettingCanvas, useSettingBackspaceEvent } from './hooks'

const TreeGraph = (props) => {
    const { fullTree, shownTree, onExpandNode, onCollapseNode, onSelectNode, onDeselectNode } = props

    const computedData = d3.tree()
        .size([1000, 1000])(shownTree)

    useSettingCanvas()
    useSettingBackspaceEvent(() => {
        const svg = d3.select('#canvas')
        svg.transition().attr('viewBox', '0, 0, 1000, 1000')
    })

    useEffect(() => {
        const svg = d3.select('#canvas')
        svg.selectAll("g").remove()

        const linkGroup = svg.append('g')
            .attr("fill", "none")
            .attr("stroke", "#FFFFFF")
            .attr("stroke-opacity", 0.8)
            .attr("stroke-width", 2)

        const link = linkGroup.selectAll('path')
            .data(computedData.links())
            .enter()
            .append('path')
            .attr('d', d3.linkHorizontal()
                .x(d => d.y)
                .y(d => d.x)
            )

        const nodeGroup = svg.append('g')
            .style('cursor', 'pointer')

        const node = nodeGroup.selectAll('g')
            .data(computedData.descendants())
            .enter()
            .append('g')
            .on('click', d => {
                d.children ? onCollapseNode(d) : onExpandNode(d)
            })
            .on('mouseenter', d => onSelectNode(d))
            .on('mouseleave', () => onDeselectNode())

        const nodeBg = node.append('rect')
            .attr('x', d => d.y)
            .attr('y', d => d.x - 15)
            .attr('rx', 15)
            .attr('ry', 15)
            .attr('width', d => 30)
            .attr('height', 30)
            .attr('fill', '#FFFFFF')

        const nodeFg = node.append('rect')
            .attr('x', d => d.y + 2)
            .attr('y', d => d.x - 13)
            .attr('rx', 13)
            .attr('ry', 13)
            .attr('width',  d => 26)
            .attr('height', 26)
            .attr('fill', d => generateColor(d.depth))
            
        const nodeCircle = node.append('circle')
            .attr('cx', d => d.y + 15)
            .attr('cy', d => d.x)
            .attr('r', 10)
            .attr('fill', '#FFFFFF')

        const nodeSign = node.append('text')
            .attr('class', 'sign')
            .attr('x', d => d.y + 15)
            .attr('y', d => d.x)
            .text(d => {
                const originalTree = findNodeInTree(d, fullTree)
                if (originalTree.children) {
                    if (d.children) return '-'
                    else return '+'
                } else return ''
            })
            .attr('fill', d => generateColor(d.depth))
            .attr('dominant-baseline', 'middle')
            .attr('text-anchor', 'middle')
            .style('font-size', 20)
            .style('font-family', 'mono')
            
        const nodeText = node.append('text')
            .attr('x', d => d.y + 34)
            .attr('y', d => d.x)
            .text(d => d.data.name)
            .attr('fill', '#FFFFFF')
            .attr('dominant-baseline', 'central')
            .style('font-size', 16)
            .style('max-width', '30px')
    })

    return <svg id="canvas"></svg>
}

export default TreeGraph