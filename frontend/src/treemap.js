import D3Graph from './d3graph.js'

export default class TreeMapGraph extends D3Graph  {
    constructor(...parameters) {
        super(...parameters)
    }

    computeData (sourceData) {
        const data = d3.stratify()
            .id(node => node.fullName)
            .parentId(node => node.parent)(sourceData)
            .count()

        const treemap = d3.treemap()
            .size([1000, 1000])
            .tile(d3.treemapBinary)
            .paddingOuter(10)
            .paddingInner(5)
            .round(true)
        
        return treemap(data)
    }

    drawNodes () {
        const nodeGroup = this.svg.append('g')
            .style('cursor', 'pointer')
    
        const node = nodeGroup.selectAll('g')
            .data(this.computedData.descendants())
            .enter()
            .append('g')
            .on('click', (d) => {
                const x = (d.x0 + d.x1) / 2 - 500
                const y = (d.y0 + d.y1) / 2 - 500
                this.svg.transition().attr('viewBox', `${x}, ${y}, 1000, 1000`)
            })
        
        const nodeBlock = node.append('rect')
            .attr('x', d => d.x0)
            .attr('y', d => d.y0)
            .attr('width', d => d.x1 - d.x0)
            .attr('height', d => d.y1 - d.y0)
            .attr('fill', d => d.depth === 0 ? this.generateColor() : 'rgba(255, 255, 255, 0.2)')
        
        const nodeText = node.append('text')
            .attr('x', d => d.x0 + 10)
            .attr('y', d => (d.y0 + d.y1) / 2)
            .text(d => d.children ? '' : d.data.name)
            .attr('fill', '#FFFFFF')
            .attr('dominant-baseline', 'central')
            .style('font-size', 16)
    
        return { nodeGroup, node, nodeBlock, nodeText }
    }

    draw () {
        this.setBodyKeyEvent()
        this.setSvg()
        this.setViewBox()
        const background = this.drawBackground()
        const { nodeGroup } = this.drawNodes()
        this.dragHandler(background)
        this.dragHandler(nodeGroup)
    }
}
