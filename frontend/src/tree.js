import D3Graph from './d3graph.js'

export default class TreeGraph extends D3Graph {
    constructor(...parameters) {
        super(...parameters)
    }

    computeData (sourceData) {
        const data = d3.stratify()
            .id(node => node.fullName)
            .parentId(node => node.parent)(sourceData)

        const tree = d3.tree()
            .size([sourceData.length * 30, 1000])
    
        return tree(data)
    }

    drawLinks () {
        const linkGroup = this.svg.append('g')
            .attr("fill", "none")
            .attr("stroke", "#FFFFFF")
            .attr("stroke-opacity", 0.8)
            .attr("stroke-width", 2)

        const link = linkGroup.selectAll('path')
            .data(this.computedData.links())
            .enter()
            .append('path')
            .attr('class', d => {
                const ancestors = d.target.ancestors()
                const classNames = ancestors.map((a, i) => {
                    const label = i === 0
                        ? 'node'
                        : 'ancestor'

                    const index = this.findIndexByName(a.data.name)
                    return `${label}-${index}`
                })

                return classNames.join(' ')
            })
            .attr('d', d3.linkHorizontal()
                .x(d => d.y)
                .y(d => d.x)
            )

        return { linkGroup, link }
    }

    drawNodes () {
        const nodeGroup = this.svg.append('g')
            .style('cursor', 'pointer')

        const node = nodeGroup.selectAll('g')
            .data(this.computedData.descendants())
            .enter()
            .append('g')
            .attr('class', d => {
                const ancestors = d.ancestors()
                const classNames = ancestors.map((a, i) => {
                    const label = i === 0
                        ? 'node'
                        : 'ancestor'

                    const index = this.findIndexByName(a.data.name)
                    return `${label}-${index}`
                })

                return classNames.join(' ')
            })
            .on('click', (d) => {
                const [x, y] = [d.y - 500, d.x - 500]
                this.svg.transition().attr('viewBox', `${x}, ${y}, 1000, 1000`)
            })

        const nodeBg = node.append('rect')
            .attr('x', d => d.y)
            .attr('y', d => d.x - 15)
            .attr('rx', 15)
            .attr('ry', 15)
            .attr('width', 200)
            .attr('height', 30)
            .attr('fill', '#FFFFFF')

        const nodeFg = node.append('rect')
            .attr('x', d => d.y + 2)
            .attr('y', d => d.x - 13)
            .attr('rx', 13)
            .attr('ry', 13)
            .attr('width', 196)
            .attr('height', 26)
            .attr('fill', d => this.generateColor(d.y))
            
        const nodeCircle = node.append('circle')
            .attr('cx', d => d.y + 15)
            .attr('cy', d => d.x)
            .attr('r', 10)
            .attr('fill', '#FFFFFF')

        const nodeSign = node.append('text')
            .attr('class', 'sign')
            .attr('x', d => d.y + 15)
            .attr('y', d => d.x)
            .text('-')
            .attr('fill', d => this.generateColor(d.y))
            .attr('dominant-baseline', 'middle')
            .attr('text-anchor', 'middle')
            .style('font-size', 20)
            .on('click', (d) => {
                d3.event.stopPropagation();
                const index = this.findIndexByName(d.data.name)

                const currentNodeSign = this.svg.select(`.node-${index} .sign`)
                
                if (currentNodeSign.text() === '-') {
                    currentNodeSign.text('+')
                    this.svg.selectAll(`.ancestor-${index}`)
                        .transition()
                        .style('opacity', 0)
                } else {
                    currentNodeSign.text('-')
                    this.svg.selectAll(`.ancestor-${index}`)
                        .transition()
                        .style('opacity', 1)
                }
            })
            
        const nodeText = node.append('text')
            .attr('x', d => d.y + 30)
            .attr('y', d => d.x)
            .text(d => d.data.name)
            .attr('fill', '#FFFFFF')
            .attr('dominant-baseline', 'central')
            .style('font-size', 16)

        return { nodeGroup, node, nodeBg, nodeFg, nodeCircle, nodeSign, nodeText }
    }

    draw () {
        this.setBodyKeyEvent()
        this.setSvg()
        this.setViewBox()
        const background = this.drawBackground()
        this.drawLinks()
        this.drawNodes()
        this.dragHandler(background)
    }
}